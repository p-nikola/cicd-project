name: Build and Deploy

on:
  push:
    branches: [ master,dev ]

jobs:
  docker:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./app
        push: true
        platforms: linux/amd64
        tags: |
          pnikola/game-backend:latest

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        platforms: linux/amd64
        tags: |
          pnikola/game-frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [docker]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Copy docker-compose file to server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        port: ${{ secrets.SSH_PORT }}
        source: "prod/docker-compose.yml"
        target: "~/"
        strip_components: 1
        
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        port: ${{ secrets.SSH_PORT }}
        script: |
            if [ ! -d ~/project ]; then
              echo "Creating project directory..."
              mkdir -p ~/project
            else
              echo "Project directory already exists."
            fi

            if [ -f ~/docker-compose.yml ]; then
              mv ~/docker-compose.yml ~/project/
            fi

            cd ~/project

            # Decode and create .env file
            echo "${{ secrets.ENV_FILE }}" | base64 -d > .env
            
            # Stop existing containers
            docker compose down

            # Pull latest images
            docker compose pull
            
            # Start with new images
            docker compose up -d
            
            # Clean up old images
            docker image prune -f
            
            echo "Deployment completed successfully."
            docker compose ps

